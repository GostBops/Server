/*
 * Swagger Blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "strings"
    "time"
	"errors"
	"encoding/binary"
    //"github.com/codegangsta/negroni"
	"github.com/dgrijalva/jwt-go"
	"github.com/boltdb/bolt"
    "github.com/dgrijalva/jwt-go/request"
)

const (
    SecretKey = "gostbops"
)

func fatal(err error) {
    if err != nil {
        log.Fatal(err)
    }
}

type Response struct {
    Data string `json:"data"`
}

type Token struct {
    Token string `json:"token"`
}

func ChangePassword(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func CreateArticle(w http.ResponseWriter, r *http.Request) {

	var user User
	user.Username = strings.Split(r.URL.Path, "/")[3]

	token, err := request.ParseFromRequest(r, request.AuthorizationHeaderExtractor,
        func(token *jwt.Token) (interface{}, error) {
            return []byte(user.Username), nil
        })

    if err == nil {
        if token.Valid {
            db, err := bolt.Open("my.db", 0600, nil)
			if err != nil {
				log.Fatal(err)
			}
			defer db.Close()

			err = db.View(func(tx *bolt.Tx) error {
				b := tx.Bucket([]byte("User"))
				if b != nil {
					v := b.Get([]byte(user.Username))
					if v == nil {
						return errors.New("User Not Exists")
					} else {
						return nil
					}
				}
				return errors.New("User Not Exists")
			})
		
			if err != nil {
				w.WriteHeader(http.StatusBadRequest)
				fmt.Println(err)
				fmt.Fprint(w, err)
				return
			}

			var articleInfo ArticleCreate
			err = json.NewDecoder(r.Body).Decode(&articleInfo)

			if err != nil  || articleInfo.Content == "" || articleInfo.Name == "" {
				w.WriteHeader(http.StatusBadRequest)
				if err != nil {
					fmt.Fprint(w, err)
					fmt.Print(err)
				} else if articleInfo.Content == "" {
					fmt.Fprint(w, "There is no content in your article")
					fmt.Print("There is no content in your article")
				} else {
					fmt.Fprint(w, "There is no name of your article")
					fmt.Print("There is no name of your article")
				}
				return
			}
			
			var tags []Tag

			for i := 0; i < len(articleInfo.Tags); i++ {
				tags = append(tags, Tag{
					Name: articleInfo.Tags[i],
				})
			}
			

			article := &Article {
				Id: 1,
				Name: articleInfo.Name,
				Tags: tags,
				Author: user.Username,
				Date: time.Now().Format("2006-01-02 15:04:05"),
				Content: articleInfo.Content,
			}

			err = db.Update(func(tx *bolt.Tx) error {
				b, err := tx.CreateBucketIfNotExists([]byte("Article"))
				if err != nil {
					return err
				}
				id, _ := b.NextSequence()
				article.Id = int(id)
				encoded, err := json.Marshal(article)
				byte_id := itob(article.Id)
				return b.Put(byte_id, encoded)
			})
		
			if err != nil {
				w.WriteHeader(http.StatusBadRequest)
				fmt.Print(err)
				fmt.Fprint(w, err)
				return
			}


			for i := 0; i < len(tags); i++ {
				err = db.Update(func(tx *bolt.Tx) error {
					b, err := tx.CreateBucketIfNotExists([]byte("Tag"))
					if err != nil {
						return err
					}
					var n []byte
					return b.Put([]byte(tags[i].Name), n)
				})
			
				if err != nil {
					w.WriteHeader(http.StatusBadRequest)
					fmt.Print(err)
					fmt.Fprint(w, err)
					return
				}
			}
			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(http.StatusOK)
			JsonResponse(article, w)
        } else {
            w.WriteHeader(http.StatusUnauthorized)
            fmt.Fprint(w, "Token is not valid")
        }
    } else {
        w.WriteHeader(http.StatusUnauthorized)
        fmt.Fprint(w, "Unauthorized access to this resource")
    }
}

func itob(v int) []byte {
    b := make([]byte, 8)
    binary.BigEndian.PutUint64(b, uint64(v))
    return b
}

func CreateComment(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func SignIn(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
    if err != nil {
        log.Fatal(err)
    }
	defer db.Close()

	var user User

	err = json.NewDecoder(r.Body).Decode(&user)

	if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprint(w, err)
			fmt.Print(err)
			return
	}
	user.Username = strings.Split(r.URL.Path, "/")[3]
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("User"))
		if b != nil {
			v := b.Get([]byte(user.Username))
			if ByteSliceEqual(v, []byte(user.Password)) {
				return nil
			} else {
				return errors.New("Wrong Username or Password")
			}
		} else {
			return errors.New("Wrong Username or Password")
		}
	})

	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		fmt.Println(err)
		fmt.Fprint(w, err)
		return
	}

	token := jwt.New(jwt.SigningMethodHS256)
	claims := make(jwt.MapClaims)
	claims["exp"] = time.Now().Add(time.Hour * time.Duration(1)).Unix()
	claims["iat"] = time.Now().Unix()
	token.Claims = claims

	if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			fmt.Fprintln(w, "Error extracting the key")
			fatal(err)
	}

	tokenString, err := token.SignedString([]byte(user.Username))
	if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			fmt.Fprintln(w, "Error while signing the token")
			fatal(err)
	}

	response := Token{tokenString}
	JsonResponse(response, w)
}

func ByteSliceEqual(a, b []byte) bool {
    if len(a) != len(b) {
        return false
    }
    if (a == nil) != (b == nil) {
        return false
    }
    for i, v := range a {
        if v != b[i] {
            return false
        }
    }
    return true
}

func JsonResponse(response interface{}, w http.ResponseWriter) {

    json, err := json.Marshal(response)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    w.WriteHeader(http.StatusOK)
    w.Header().Set("Content-Type", "application/json")
    w.Write(json)
}

func SignUp(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
    if err != nil {
        log.Fatal(err)
    }
	defer db.Close()

	var user User
	err = json.NewDecoder(r.Body).Decode(&user)

	if err != nil || user.Password == "" || user.Username == "" {
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprint(w, "Wrong Username or Password")
			fmt.Print(err)
			return
	}

	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("User"))
		if b != nil {
			v := b.Get([]byte(user.Username))
			if v != nil {
				return errors.New("User Exists")
			}
		}
		return nil
	})

	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Println(err)
		fmt.Fprint(w, err)
		return
	}

	err = db.Update(func(tx *bolt.Tx) error {
		b, err := tx.CreateBucketIfNotExists([]byte("User"))
		if err != nil {
			return err
		}
		return b.Put([]byte(user.Username), []byte(user.Password))
	})

	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Print(err)
		fmt.Fprint(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
